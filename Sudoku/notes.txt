Note to self:
don't call a method that changes an object in a print statement or the print statement will alter the object
Naked single code:
    candidate_set_before = 0
        #print(candidate_set_before)
        for group in self.groups:
            used_values = set()
            for tile in group:
                if str(tile) in CHOICES:
                    used_values.add(tile.value)
            for tile in group:
                if str(tile) in UNKNOWN and len(used_values) > 0:
                    #print(used_values)
                    if Tile.remove_candidates(tile, used_values):
                        candidate_set_before += 1
        candidate_set_after = candidate_set_before
        #print(candidate_set_after)
        if candidate_set_after > 0:
            return True
        else:
            return False

def hidden_single(self) -> bool:
        """
        Suppose we have eliminated all but two candidates from all our unknown tiles. If one of the 
        unknown tiles has a value of 3 and no other unknown tiles have that value of 3, then
        the tile with a candidate of 3 must have the value of 3 because there is no other place
        to put it (i.e. no other tile has a candidate of 3 because 3 was elimated).

        Return True if a value was placed on a tile (marking we made progress)
        Returns False if no value was placed on a tile (marking we made no progress).
        """
        tile_to_change = None
        for group in self.groups:
            set_tile = 0
            leftovers = set(CHOICES)
            for tile in group:
                if tile.value in CHOICES:
                    if tile.value in leftovers:
                        leftovers.remove(tile.value)
            for value in leftovers:
                count = 0
                for tile in group:
                    if value not in tile.value:
                        if value in tile.candidates:
                            #print(value)
                            count += 1
                            tile_to_change = tile
                if count < 2 and count > 0:
                    #print(tile_to_change.candidates)
                    print(group)
                    #print(value)
                    tile_to_change.set_value(value)
                    tile_to_change.notify_all(TileEvent(tile_to_change, EventKind.TileChanged))
                    set_tile += 1
        if set_tile > 0:
            return True
        else:
            return False

"a little brute force when necessary" "brute force in the right parts" I like these ideas.